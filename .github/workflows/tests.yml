name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    branches:
      - testChat
  pull_request:
    branches:
      - testChat
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository 2 is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."

      # √âtape pour envoyer une notification √† Google Chat
  google-chat-action:
      name: Google Chat GitHub Action
      runs-on: ubuntu-latest

      steps:
        - name: Checkout
          id: checkout
          uses: actions/checkout@v4

        # ... Run your build stuff or whatever ...

        - name: Notify Google Chat
          if: ${{ always() }} # Use always to ensure that the notification is also send on failure of former steps
          uses: SimonScholz/google-chat-action@main
          with:
            webhookUrl: '${{ secrets.GOOGLE_CHAT_WEBHOOK }}'
            jobStatus: '${{ job.status }}'

# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '18'

#       # Lister les fichiers dans safebasefront pour d√©bogage
#       - name: List files in safebasefront
#         run: ls -la safebasefront

#       # Construire l'image Docker pour le frontend
#       - name: Build Frontend Docker image
#         run: |
#           cd safebasefront
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/safebasefront:latest .

#       # Construire l'image Docker pour le backend
#       - name: Build Backend Docker image
#         run: |
#           cd SafebaseBack
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/safebaseback:latest .

#       # Se connecter √† Docker Hub
#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#       # Pousser les images Docker
#       - name: Push Frontend Docker image
#         run: docker push ${{ secrets.DOCKER_USERNAME }}/safebasefront:latest

#       - name: Push Backend Docker image
#         run: docker push ${{ secrets.DOCKER_USERNAME }}/safebaseback:latest

#       # Se d√©connecter de Docker Hub
#       - name: Log out of Docker Hub
#         run: docker logout
